clear; clc; close all;

S = 500; seed_num = 1; threshold = 10^(-12); iterlim = 50000;
num_sim = 100;
%% Load Data
data_firm = table2array(readtable("product_data_ps2.csv"));
data_consumer = table2array(readtable("consumer_census.csv"));
jt = [data_firm(:,1), data_firm(:,8)]; % = [Firm index, Period index]
T = max(unique(jt(:,2))); % Observational Period
J = max(unique(jt(:,1))); % # of Firms
JT = J*T;
yit = reshape( data_consumer(:,2), [size(data_consumer,1)/T, T] ); % Consumer's Income

sugar0 = reshape( data_firm(:,3), [J, T]);
caffein0 = reshape( data_firm(:,4), [J, T]);
corn_syrup_price = reshape( data_firm(:,5), [J, T]);
caffein_ext_price = reshape( data_firm(:,6), [J, T]);
pr0 = reshape( data_firm(:,2), [J, T]); % Price
sh0 = reshape( data_firm(:,9), [J, T]); % Share
w0 = [ones(J*T,1), data_firm(:,5:6).*data_firm(:,3:4)];
ph0 =  reshape(w0*inv(w0'*w0)*w0'*data_firm(:,2), [J,T]); %Prediced Price

oneJ = ones(J,1);
data.price = reshape(pr0, [JT,1])';
data.ph = reshape(ph0,[JT,1])';
data.share = reshape(sh0, [JT,1])';
data.lnshare0 = (reshape(log(eps + repmat(1 - sum(sh0,1), [T,1])), [J*T,1]))';
data.x1 = reshape(sugar0, [JT,1])';
data.x2 = reshape(caffein0, [JT,1])';
data.kroneyeToneJ = kron(eye(T), oneJ);
data.oneJ = oneJ;
data.T = T;
data.J = J;

X0 = [ones(J*T,1), data.price', data.x1', data.x2'];
Y0 = (log(data.share) - data.lnshare0)';
xb0 = (X0*[-1; -1; 0.5; 0.5])';

tic
delta_1n = zeros(num_sim,T);
for iter=1:num_sim
    disp(iter);
    result = draw_yv(S, yit, seed_num); vy = result.y;
    data.vyp = []; data.vyp = kron(vy, oneJ').*data.price;
    data.vyph = []; data.vyph = kron(vy, oneJ').*data.ph;
    data.v1x1= []; data.v1x1 = repmat(result.v1, [1,JT]).*(data.x1);
    data.v2x2 = [];data.v2x2 = repmat(result.v2, [1,JT]).*(data.x2);
    delta00 = reshape(get_delta(data, [0;1;1], xb0, ""), [J,T]);
    delta_1n(iter,:) = delta00(:,1)';
end
toc
%%
perc_delta_1n = [];
for j = 1:J
    perc_delta_1n = [perc_delta_1n; prctile(delta_1n(:,j), [25, 50 ,75])];
end

result= [perc_delta_1n, mean(delta_1n,1)', var(delta_1n,1)'];

ans4latex = num2str((1:1:J)');
for iter=1:5
    ans4latex = ans4latex + "&" + num2str(  round(result(:,iter),3) );
end
ans4latex = ans4latex + "\\";

%%
function result = draw_yv(S, y, seed)
    % rng(seed);
    idx = datasample( (1:1:size(y,1))', S );
    result.y = y(idx, :);
    result.v1 = randn(S,1);
    result.v2 = randn(S,1);
end

function [share, result]= get_new_share(transformed_data, para0, delta0)
    vyp = transformed_data.vyp;
    v1x1 = transformed_data.v1x1;
    v2x2 = transformed_data.v2x2;
    T = transformed_data.T;
    J = transformed_data.J;

    mu0 = para0(1,:)*vyp + para0(2,:)*v1x1 + para0(3,:)*v2x2;
    exp_u = exp( delta0 + mu0);
    den = [];
    for t=1:T
        idx0 = T*(t-1) + (1:1:J);
        den = [den, repmat(1 + sum(exp_u(:,idx0),2), [1,J])];
    end
    share =  exp_u./den;
    result.share = share;
    result.den = den;
end

function [delta, result] = get_delta(transformed_data, para2, delta0, print, iterlim, threshold)
    if nargin == 3; print = ""; iterlim = 5000; threshold = 10^(-3);
    elseif nargin == 4; iterlim = 5000; threshold = 10^(-3);
    elseif nargin == 5; threshold = 10^(-3);
    end
    if isstring(print)==0; print = ""; end
    lnsh = log(transformed_data.share);
    cal_new_share = @(delta, para)( mean(get_new_share(transformed_data, para, delta),1) );

    iter = 0; convergence = 0;
    while iter<iterlim
        iter = iter + 1;
        delta1 = delta0 + (lnsh -  log(eps + cal_new_share(delta0, para2)) );
        diff = norm(delta1 - delta0);
        if print=="print"; disp(num2str([iter, diff])); end
        if isnan(diff) == 1; disp(" Error! "); break; end
        if diff < threshold; delta = delta1; convergence = 1; break; end
        delta0 = delta1;
    end
    result.convergence = convergence;
    if convergence == 1; disp("Contraction Mapping Converged"); result.delta = delta';
    else; result.delta = []; end
end
