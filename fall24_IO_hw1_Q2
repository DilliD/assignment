clear; clc; load fall24_io_hw1_data.mat;

xjt = [p, sugar, caff];
wj = [ (nest == "Diet" ), (nest == "Regular" ) ];
zjt = [caff_pr, syrup_pr];
x = [xjt, wj]; kx = size(x,2);
z = [zjt(:,1:2), x(:,2:end)];
share_jt = reshape(share, [10, 100]);
s0t = 1-sum(share_jt,1)';
y = log(share) - log( kron(s0t, ones(10,1)) );

sum_share_diet = kron( sum(share_jt(1:5,:))', ones(10,1));
sum_share_reg = kron( sum(share_jt(6:end,:))', ones(10,1));
den = sum_share_diet.*wj(:,1) + sum_share_reg.*wj(:,2);
sjg = reshape(share_jt, [1000,1])./den;

x = [x, log(sjg)];

mat_sugar = reshape(sugar, [10, 100]);
mat_caff = reshape(caff, [10,100]);
for j=1:10
    if j <= 5; idx = (1:1:5)'; idx(j,:) = [];
    elseif j>5; idx = (6:1:10)'; idx(j-5,:) = [];
    end
    avg_comp_sugar(j,:) = mean(mat_sugar(idx,:),1);
    avg_comp_caff(j,:) = mean(mat_caff(idx,:), 1);
end

avg_comp_sugar = reshape(avg_comp_sugar, [1000,1]);
avg_comp_caff = reshape(avg_comp_caff, [1000,1]);

z = [z, avg_comp_sugar, avg_comp_caff];

%%
result_ols = get_ols(x,y);
result_gmm = get_gmm(x,y,z);

% Over-ID Test
zu = z'*result_gmm.rsd;
Jn = zu'*result_gmm.weight*zu;
pv = 1 - chi2cdf(Jn, 1);

disp("OLS"); disp( [result_ols.b, result_ols.tv] )
% disp("1st Stage"); disp([result_1st.b, result_1st.tv])
disp("GMM"); disp([result_gmm.b, result_gmm.tv])
disp("Over-Id Test"); disp([Jn, pv])

varname = ["price"; "sugar"; "caffeine"; "Diet"; "Regular"; "sigma"];
tex2_ab = varname + "&"+ num2str( round(result_ols.b,3)) + "&" + num2str( round(result_ols.tv,3))+"&";
tex2_ab = tex2_ab + num2str( round(result_gmm.b,3)) + "&" + num2str( round(result_gmm.tv,3))+"\\";
% tex_ab_1st_stage = ["caffeine_extra_price"; "corn_syrup_price"]+"&"+num2str( round( result_1st.b(1:2,:),3)) + "&" + num2str( round(result_1st.tv(1:2,:),3))+"\\";
tex2_ab_overid = num2str( round(Jn,3)) + "&" + num2str( round(pv,3))+"\\";

% s_j = exp(d_j)/(1 + exp(d_1) + ... + exp(d_J))
%     = exp(d_j) * S^{-1}
% ds_j / dp_j = a*exp(d_j) * S^{-1} - exp(d_j) * S^{-2}*a*exp(d_j)
%             = a*s_j - a*s_j^2 = a*s_j*(1-s_j)
% ds_j / dp_1 = - exp(d_j) * S^{-2}*a*exp(d_1)
%             = -a*s_j*s_1

prod = prod_id == (1:1:10);
get_pe_jj_nest = @(para)(  sum( para(1,1)*p.*(1-y).*prod ,1)'./sum( prod, 1)' ); 
% get_pe_jj_nest = @(para)(  sum( para(1,1)*p.*(1-y).*wj ,1)'./sum( wj, 1)' ); 
pe_jj_nest = get_pe_jj_nest(result_gmm.b);
gr = gradp(result_gmm.b, get_pe_jj_nest);
var_pe_jj_nest = gr*result_gmm.vcov*gr';
se_pe_jj_nest = sqrt(diag(var_pe_jj_nest));

y1 = y(prod_id==1,:); y1 = kron( y1, ones(10,1));
p1 = p(prod_id==1,:); p1 = kron( p1, ones(10,1));
get_pe_j1_nest = @(para)(  sum( -para(1,1)*y1.*p1.*prod.*(prod_id>1) ,1)'./sum( prod.*(prod_id>1), 1)' ); 
pe_j1_nest = get_pe_j1_nest(result_gmm.b);
gr = gradp(result_gmm.b, get_pe_j1_nest);
var_pe_j1_nest = gr*result_gmm.vcov*gr';
se_pe_j1_nest = sqrt(diag(var_pe_j1_nest));
tex2_cd = ["Diet : "+num2str((1:1:5)'); "Regular : "+num2str((6:1:10)')] + "&" + num2str( round(pe_jj_nest,3) ) + "&" + num2str( round(se_pe_jj_nest,3) ) + "\\";
tex2_cd = tex2_cd + num2str( round(pe_j1_nest,3) ) + "&" + num2str( round(se_pe_j1_nest,3) ) + "\\";

y_last = y(period==max(period),:);
Jacobi = -result_gmm.b(1,1)*y_last*y_last';
tex2_e = [];
for t=1:10
    tex00 = "";
    for j=1:10
        if j < 10
            tex00 = tex00 + num2str( round(Jacobi(t,j),4) ) + "&";
        elseif j == 10
            tex00 = tex00 + num2str( round(Jacobi(t,j),4) ) + "\\";
        end
    end
    tex2_e = [tex2_e; tex00];
end
%%
function result = get_ols(x,y)
invxx = inv(x'*x);
b = invxx*x'*y;
uh2 = (y-x*b).^2;
vcov = invxx*(x'*(uh2.*x))*invxx;
se = sqrt(diag(vcov));
tv = b./se;
result.b = b;  result.vcov = vcov; result.se = se; result.tv = tv;
end

function result = get_gmm(x,y,z)
xz = x'*z;
invzz = inv(z'*z);
b_ive = inv(xz*invzz*xz')*xz*invzz*z'*y;
uh2 = (y - x*b_ive).^2;
w = inv(z'*(uh2.*z));
invxzwzx = inv(xz*w*xz');
b = invxzwzx*xz*w*z'*y;
vcov = invxzwzx;
se= sqrt(diag(vcov));
tv = b./se;
result.weight = w;
result.b = b; result.rsd = y - x*b; result.vcov = vcov; result.se = se; result.tv = tv;
end

function gr=gradp(a,qi,h)
% gr=gradp(a,qi,h)
% Procedure for Calculating Numerical Gradient
if nargin<3; h=0.00001; end
n=size(qi(a),1); k=size(a,1); eyek=eye(k); gr=zeros(n,k);
for j=1:k; hj=h*eyek(:,j); gr(:,j)=(qi(a+hj)-qi(a-hj))./(2*h); end
end
