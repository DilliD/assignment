% clear; clc;
% 
% dta = readtable("product_data.csv");
% nest = string(table2array(dta(:,2)));
% dta = double(table2array(dta(:,[1, (3:1:9)])));
% prod_id = dta(:,1); p = dta(:,2); sugar = dta(:,3);
% caff = dta(:,4); share = dta(:,5); caff_pr = dta(:,6);
% syrup_pr = dta(:,7); period = dta(:,8);
% save fall24_io_hw1_data.mat;

%%
clear; clc; load fall24_io_hw1_data.mat;

% u_{ijt} = [p_{jt}, sug_{jt}, caf_{jt}]'b + [diet_{j}, regular_{j}]'c + xi_{jt} + e_{ijt}
% i : individual consumer
% j : product
% t : observation period
% Note : Each product is either diet or regular.
% So the model contains no intercept
xjt = [p, sugar, caff];
wj = [ (nest == "Diet" ), (nest == "Regular" ) ];
zjt = [caff_pr, syrup_pr];
x = [xjt, wj]; kx = size(x,2);
z = [zjt(:,1:2), x(:,2:end)];
share_jt = reshape(share, [10, 100]);
s0t = 1-sum(share_jt,1)';
y = log(share) - log( kron(s0t, ones(10,1)) );

result_ols = get_ols(x,y); %OLS
result_1st = get_ols(z, x(:,1)); %First Stage
result_gmm = get_gmm(x,y,z); %GMM

% Over-ID Test
zu = z'*result_gmm.rsd; Jn = zu'*result_gmm.weight*zu;
pv = 1 - chi2cdf(Jn, 1);

disp("OLS"); disp( [result_ols.b, result_ols.tv] )
disp("1st Stage"); disp([result_1st.b, result_1st.tv])
disp("GMM"); disp([result_gmm.b, result_gmm.tv])
disp("Over-Id Test"); disp([Jn, pv])


varname = ["price"; "sugar"; "caffeine"; "Diet"; "Regular"];
tex1_ab = varname + "&"+ num2str( round(result_ols.b,3)) + "&" + num2str( round(result_ols.tv,3))+"&";
tex1_ab = tex1_ab + num2str( round(result_gmm.b,3)) + "&" + num2str( round(result_gmm.tv,3))+"\\";
tex_ab_1st_stage = ["caffeine_extra_price"; "corn_syrup_price"]+"&"+num2str( round( result_1st.b(1:2,:),3)) + "&" + num2str( round(result_1st.tv(1:2,:),3))+"\\";
tex1_ab_overid = num2str( round(Jn,3)) + "&" + num2str( round(pv,3))+"\\";

% s_j = exp(d_j)/(1 + exp(d_1) + ... + exp(d_J))
%     = exp(d_j) * S^{-1}
% ds_j / dp_j = a*exp(d_j) * S^{-1} - exp(d_j) * S^{-2}*a*exp(d_j)
%             = a*s_j - a*s_j^2 = a*s_j*(1-s_j)
% ds_j / dp_1 = - exp(d_j) * S^{-2}*a*exp(d_1)
%             = -a*s_j*s_1
y = share;
prod = prod_id == (1:1:10);
get_pe_jj_nest = @(para)(  sum( para(1,1)*p.*(1-y).*prod ,1)'./sum( prod, 1)' ); 
% get_pe_jj_nest = @(para)(  sum( para(1,1)*p.*(1-y).*wj ,1)'./sum( wj, 1)' ); 
pe_jj_nest = get_pe_jj_nest(result_gmm.b);
gr = gradp(result_gmm.b, get_pe_jj_nest);
var_pe_jj_nest = gr*result_gmm.vcov*gr';
se_pe_jj_nest = sqrt(diag(var_pe_jj_nest));

y1 = y(prod_id==1,:); y1 = kron( y1, ones(10,1));
p1 = p(prod_id==1,:); p1 = kron( p1, ones(10,1));
get_pe_j1_nest = @(para)(  sum( -para(1,1)*y1.*p1.*prod.*(prod_id>1) ,1)'./sum( prod.*(prod_id>1), 1)' ); 
pe_j1_nest = get_pe_j1_nest(result_gmm.b);
gr = gradp(result_gmm.b, get_pe_j1_nest);
var_pe_j1_nest = gr*result_gmm.vcov*gr';
se_pe_j1_nest = sqrt(diag(var_pe_j1_nest));
tex1_cd = ["Diet&"+num2str((1:1:5)'); "Regular&"+num2str((6:1:10)')] + "&" + num2str( round(pe_jj_nest,3) ) + "&" + num2str( round(se_pe_jj_nest,3) ) + "\\";
tex1_cd = tex1_cd + num2str( round(pe_j1_nest,3) ) + "&" + num2str( round(se_pe_j1_nest,3) ) + "\\";

y_last = y(period==max(period),:);
Jacobi = -(y_last)*y_last';
Jacobi = result_gmm.b(1,1) * (Jacobi - diag(Jacobi) + diag(y_last.*(1-y_last)));
tex1_e = [];
for t=1:10
    tex00 = "";
    for j=1:10
        if j < 10
            tex00 = tex00 + num2str( round(Jacobi(t,j),3) ) + "&";
        elseif j == 10
            tex00 = tex00 + num2str( round(Jacobi(t,j),3) ) + "\\";
        end
    end
    tex1_e = [tex1_e; tex00];
end
%%
function result = get_ols(x,y)
invxx = inv(x'*x);
b = invxx*x'*y;
uh2 = (y-x*b).^2;
vcov = invxx*(x'*(uh2.*x))*invxx;
se = sqrt(diag(vcov));
tv = b./se;
result.b = b;  result.vcov = vcov; result.se = se; result.tv = tv;
end

function result = get_gmm(x,y,z)
xz = x'*z;
invzz = inv(z'*z);
b_ive = inv(xz*invzz*xz')*xz*invzz*z'*y;
uh2 = (y - x*b_ive).^2;
w = inv(z'*(uh2.*z));
invxzwzx = inv(xz*w*xz');
b = invxzwzx*xz*w*z'*y;
vcov = invxzwzx;
se= sqrt(diag(vcov));
tv = b./se;
result.weight = w;
result.b = b; result.rsd = y - x*b; result.vcov = vcov; result.se = se; result.tv = tv;
end

function gr=gradp(a,qi,h)
% gr=gradp(a,qi,h)
% Procedure for Calculating Numerical Gradient
if nargin<3; h=0.00001; end
n=size(qi(a),1); k=size(a,1); eyek=eye(k); gr=zeros(n,k);
for j=1:k; hj=h*eyek(:,j); gr(:,j)=(qi(a+hj)-qi(a-hj))./(2*h); end
end
